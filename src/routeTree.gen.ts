/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OverlayImport } from './routes/overlay'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as ViewRouteImport } from './routes/_view/route'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as AdminCompetitorsImport } from './routes/admin/competitors'
import { Route as AdminScheduleRouteImport } from './routes/admin/schedule/route'
import { Route as AdminParticipantsRouteImport } from './routes/admin/participants/route'
import { Route as ViewScheduleRouteImport } from './routes/_view/schedule/route'
import { Route as ViewStatsIndexImport } from './routes/_view/stats/index'
import { Route as ViewScheduleIndexImport } from './routes/_view/schedule/index'
import { Route as ViewBracketIndexImport } from './routes/_view/bracket/index'
import { Route as DemoStartServerFuncsImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestImport } from './routes/demo.start.api-request'
import { Route as AdminScheduleIdImport } from './routes/admin/schedule/$id'
import { Route as AdminParticipantsNewImport } from './routes/admin/participants/new'
import { Route as AdminParticipantsIdImport } from './routes/admin/participants/$id'
import { Route as ViewScheduleIdImport } from './routes/_view/schedule/$id'
import { Route as AdminScheduleIdNewbracketImport } from './routes/admin/schedule/$id.newbracket'
import { Route as AdminScheduleIdEditImport } from './routes/admin/schedule/$id.edit'

// Create/Update Routes

const OverlayRoute = OverlayImport.update({
  id: '/overlay',
  path: '/overlay',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const ViewRouteRoute = ViewRouteImport.update({
  id: '/_view',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const AdminCompetitorsRoute = AdminCompetitorsImport.update({
  id: '/competitors',
  path: '/competitors',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminScheduleRouteRoute = AdminScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminParticipantsRouteRoute = AdminParticipantsRouteImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => AdminRouteRoute,
} as any)

const ViewScheduleRouteRoute = ViewScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => ViewRouteRoute,
} as any)

const ViewStatsIndexRoute = ViewStatsIndexImport.update({
  id: '/stats/',
  path: '/stats/',
  getParentRoute: () => ViewRouteRoute,
} as any)

const ViewScheduleIndexRoute = ViewScheduleIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewScheduleRouteRoute,
} as any)

const ViewBracketIndexRoute = ViewBracketIndexImport.update({
  id: '/bracket/',
  path: '/bracket/',
  getParentRoute: () => ViewRouteRoute,
} as any)

const DemoStartServerFuncsRoute = DemoStartServerFuncsImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRoute,
} as any)

const DemoStartApiRequestRoute = DemoStartApiRequestImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRoute,
} as any)

const AdminScheduleIdRoute = AdminScheduleIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminScheduleRouteRoute,
} as any)

const AdminParticipantsNewRoute = AdminParticipantsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)

const AdminParticipantsIdRoute = AdminParticipantsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)

const ViewScheduleIdRoute = ViewScheduleIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ViewScheduleRouteRoute,
} as any)

const AdminScheduleIdNewbracketRoute = AdminScheduleIdNewbracketImport.update({
  id: '/newbracket',
  path: '/newbracket',
  getParentRoute: () => AdminScheduleIdRoute,
} as any)

const AdminScheduleIdEditRoute = AdminScheduleIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => AdminScheduleIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_view': {
      id: '/_view'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ViewRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/overlay': {
      id: '/overlay'
      path: '/overlay'
      fullPath: '/overlay'
      preLoaderRoute: typeof OverlayImport
      parentRoute: typeof rootRoute
    }
    '/_view/schedule': {
      id: '/_view/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ViewScheduleRouteImport
      parentRoute: typeof ViewRouteImport
    }
    '/admin/participants': {
      id: '/admin/participants'
      path: '/participants'
      fullPath: '/admin/participants'
      preLoaderRoute: typeof AdminParticipantsRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/schedule': {
      id: '/admin/schedule'
      path: '/schedule'
      fullPath: '/admin/schedule'
      preLoaderRoute: typeof AdminScheduleRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/competitors': {
      id: '/admin/competitors'
      path: '/competitors'
      fullPath: '/admin/competitors'
      preLoaderRoute: typeof AdminCompetitorsImport
      parentRoute: typeof AdminRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/_view/schedule/$id': {
      id: '/_view/schedule/$id'
      path: '/$id'
      fullPath: '/schedule/$id'
      preLoaderRoute: typeof ViewScheduleIdImport
      parentRoute: typeof ViewScheduleRouteImport
    }
    '/admin/participants/$id': {
      id: '/admin/participants/$id'
      path: '/$id'
      fullPath: '/admin/participants/$id'
      preLoaderRoute: typeof AdminParticipantsIdImport
      parentRoute: typeof AdminParticipantsRouteImport
    }
    '/admin/participants/new': {
      id: '/admin/participants/new'
      path: '/new'
      fullPath: '/admin/participants/new'
      preLoaderRoute: typeof AdminParticipantsNewImport
      parentRoute: typeof AdminParticipantsRouteImport
    }
    '/admin/schedule/$id': {
      id: '/admin/schedule/$id'
      path: '/$id'
      fullPath: '/admin/schedule/$id'
      preLoaderRoute: typeof AdminScheduleIdImport
      parentRoute: typeof AdminScheduleRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestImport
      parentRoute: typeof rootRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsImport
      parentRoute: typeof rootRoute
    }
    '/_view/bracket/': {
      id: '/_view/bracket/'
      path: '/bracket'
      fullPath: '/bracket'
      preLoaderRoute: typeof ViewBracketIndexImport
      parentRoute: typeof ViewRouteImport
    }
    '/_view/schedule/': {
      id: '/_view/schedule/'
      path: '/'
      fullPath: '/schedule/'
      preLoaderRoute: typeof ViewScheduleIndexImport
      parentRoute: typeof ViewScheduleRouteImport
    }
    '/_view/stats/': {
      id: '/_view/stats/'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof ViewStatsIndexImport
      parentRoute: typeof ViewRouteImport
    }
    '/admin/schedule/$id/edit': {
      id: '/admin/schedule/$id/edit'
      path: '/edit'
      fullPath: '/admin/schedule/$id/edit'
      preLoaderRoute: typeof AdminScheduleIdEditImport
      parentRoute: typeof AdminScheduleIdImport
    }
    '/admin/schedule/$id/newbracket': {
      id: '/admin/schedule/$id/newbracket'
      path: '/newbracket'
      fullPath: '/admin/schedule/$id/newbracket'
      preLoaderRoute: typeof AdminScheduleIdNewbracketImport
      parentRoute: typeof AdminScheduleIdImport
    }
  }
}

// Create and export the route tree

interface ViewScheduleRouteRouteChildren {
  ViewScheduleIdRoute: typeof ViewScheduleIdRoute
  ViewScheduleIndexRoute: typeof ViewScheduleIndexRoute
}

const ViewScheduleRouteRouteChildren: ViewScheduleRouteRouteChildren = {
  ViewScheduleIdRoute: ViewScheduleIdRoute,
  ViewScheduleIndexRoute: ViewScheduleIndexRoute,
}

const ViewScheduleRouteRouteWithChildren =
  ViewScheduleRouteRoute._addFileChildren(ViewScheduleRouteRouteChildren)

interface ViewRouteRouteChildren {
  ViewScheduleRouteRoute: typeof ViewScheduleRouteRouteWithChildren
  ViewBracketIndexRoute: typeof ViewBracketIndexRoute
  ViewStatsIndexRoute: typeof ViewStatsIndexRoute
}

const ViewRouteRouteChildren: ViewRouteRouteChildren = {
  ViewScheduleRouteRoute: ViewScheduleRouteRouteWithChildren,
  ViewBracketIndexRoute: ViewBracketIndexRoute,
  ViewStatsIndexRoute: ViewStatsIndexRoute,
}

const ViewRouteRouteWithChildren = ViewRouteRoute._addFileChildren(
  ViewRouteRouteChildren,
)

interface AdminParticipantsRouteRouteChildren {
  AdminParticipantsIdRoute: typeof AdminParticipantsIdRoute
  AdminParticipantsNewRoute: typeof AdminParticipantsNewRoute
}

const AdminParticipantsRouteRouteChildren: AdminParticipantsRouteRouteChildren =
  {
    AdminParticipantsIdRoute: AdminParticipantsIdRoute,
    AdminParticipantsNewRoute: AdminParticipantsNewRoute,
  }

const AdminParticipantsRouteRouteWithChildren =
  AdminParticipantsRouteRoute._addFileChildren(
    AdminParticipantsRouteRouteChildren,
  )

interface AdminScheduleIdRouteChildren {
  AdminScheduleIdEditRoute: typeof AdminScheduleIdEditRoute
  AdminScheduleIdNewbracketRoute: typeof AdminScheduleIdNewbracketRoute
}

const AdminScheduleIdRouteChildren: AdminScheduleIdRouteChildren = {
  AdminScheduleIdEditRoute: AdminScheduleIdEditRoute,
  AdminScheduleIdNewbracketRoute: AdminScheduleIdNewbracketRoute,
}

const AdminScheduleIdRouteWithChildren = AdminScheduleIdRoute._addFileChildren(
  AdminScheduleIdRouteChildren,
)

interface AdminScheduleRouteRouteChildren {
  AdminScheduleIdRoute: typeof AdminScheduleIdRouteWithChildren
}

const AdminScheduleRouteRouteChildren: AdminScheduleRouteRouteChildren = {
  AdminScheduleIdRoute: AdminScheduleIdRouteWithChildren,
}

const AdminScheduleRouteRouteWithChildren =
  AdminScheduleRouteRoute._addFileChildren(AdminScheduleRouteRouteChildren)

interface AdminRouteRouteChildren {
  AdminParticipantsRouteRoute: typeof AdminParticipantsRouteRouteWithChildren
  AdminScheduleRouteRoute: typeof AdminScheduleRouteRouteWithChildren
  AdminCompetitorsRoute: typeof AdminCompetitorsRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminParticipantsRouteRoute: AdminParticipantsRouteRouteWithChildren,
  AdminScheduleRouteRoute: AdminScheduleRouteRouteWithChildren,
  AdminCompetitorsRoute: AdminCompetitorsRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ViewRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/overlay': typeof OverlayRoute
  '/schedule': typeof ViewScheduleRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/schedule/$id': typeof ViewScheduleIdRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/bracket': typeof ViewBracketIndexRoute
  '/schedule/': typeof ViewScheduleIndexRoute
  '/stats': typeof ViewStatsIndexRoute
  '/admin/schedule/$id/edit': typeof AdminScheduleIdEditRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ViewRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/overlay': typeof OverlayRoute
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/schedule/$id': typeof ViewScheduleIdRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/bracket': typeof ViewBracketIndexRoute
  '/schedule': typeof ViewScheduleIndexRoute
  '/stats': typeof ViewStatsIndexRoute
  '/admin/schedule/$id/edit': typeof AdminScheduleIdEditRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_view': typeof ViewRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/overlay': typeof OverlayRoute
  '/_view/schedule': typeof ViewScheduleRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_view/schedule/$id': typeof ViewScheduleIdRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/_view/bracket/': typeof ViewBracketIndexRoute
  '/_view/schedule/': typeof ViewScheduleIndexRoute
  '/_view/stats/': typeof ViewStatsIndexRoute
  '/admin/schedule/$id/edit': typeof AdminScheduleIdEditRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/admin'
    | '/overlay'
    | '/schedule'
    | '/admin/participants'
    | '/admin/schedule'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/schedule/$id'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/schedule/$id'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/bracket'
    | '/schedule/'
    | '/stats'
    | '/admin/schedule/$id/edit'
    | '/admin/schedule/$id/newbracket'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/admin'
    | '/overlay'
    | '/admin/participants'
    | '/admin/schedule'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/schedule/$id'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/schedule/$id'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/bracket'
    | '/schedule'
    | '/stats'
    | '/admin/schedule/$id/edit'
    | '/admin/schedule/$id/newbracket'
  id:
    | '__root__'
    | '/'
    | '/_view'
    | '/admin'
    | '/overlay'
    | '/_view/schedule'
    | '/admin/participants'
    | '/admin/schedule'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/_view/schedule/$id'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/schedule/$id'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/_view/bracket/'
    | '/_view/schedule/'
    | '/_view/stats/'
    | '/admin/schedule/$id/edit'
    | '/admin/schedule/$id/newbracket'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ViewRouteRoute: typeof ViewRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  OverlayRoute: typeof OverlayRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ViewRouteRoute: ViewRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  OverlayRoute: OverlayRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_view",
        "/admin",
        "/overlay",
        "/demo/tanstack-query",
        "/demo/start/api-request",
        "/demo/start/server-funcs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_view": {
      "filePath": "_view/route.tsx",
      "children": [
        "/_view/schedule",
        "/_view/bracket/",
        "/_view/stats/"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/participants",
        "/admin/schedule",
        "/admin/competitors"
      ]
    },
    "/overlay": {
      "filePath": "overlay.tsx"
    },
    "/_view/schedule": {
      "filePath": "_view/schedule/route.tsx",
      "parent": "/_view",
      "children": [
        "/_view/schedule/$id",
        "/_view/schedule/"
      ]
    },
    "/admin/participants": {
      "filePath": "admin/participants/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/participants/$id",
        "/admin/participants/new"
      ]
    },
    "/admin/schedule": {
      "filePath": "admin/schedule/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/schedule/$id"
      ]
    },
    "/admin/competitors": {
      "filePath": "admin/competitors.tsx",
      "parent": "/admin"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/_view/schedule/$id": {
      "filePath": "_view/schedule/$id.tsx",
      "parent": "/_view/schedule"
    },
    "/admin/participants/$id": {
      "filePath": "admin/participants/$id.tsx",
      "parent": "/admin/participants"
    },
    "/admin/participants/new": {
      "filePath": "admin/participants/new.tsx",
      "parent": "/admin/participants"
    },
    "/admin/schedule/$id": {
      "filePath": "admin/schedule/$id.tsx",
      "parent": "/admin/schedule",
      "children": [
        "/admin/schedule/$id/edit",
        "/admin/schedule/$id/newbracket"
      ]
    },
    "/demo/start/api-request": {
      "filePath": "demo.start.api-request.tsx"
    },
    "/demo/start/server-funcs": {
      "filePath": "demo.start.server-funcs.tsx"
    },
    "/_view/bracket/": {
      "filePath": "_view/bracket/index.tsx",
      "parent": "/_view"
    },
    "/_view/schedule/": {
      "filePath": "_view/schedule/index.tsx",
      "parent": "/_view/schedule"
    },
    "/_view/stats/": {
      "filePath": "_view/stats/index.tsx",
      "parent": "/_view"
    },
    "/admin/schedule/$id/edit": {
      "filePath": "admin/schedule/$id.edit.tsx",
      "parent": "/admin/schedule/$id"
    },
    "/admin/schedule/$id/newbracket": {
      "filePath": "admin/schedule/$id.newbracket.tsx",
      "parent": "/admin/schedule/$id"
    }
  }
}
ROUTE_MANIFEST_END */
