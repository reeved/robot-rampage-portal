/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as ViewRouteRouteImport } from './routes/_view/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminTimerRouteImport } from './routes/admin_/timer'
import { Route as AdminMiniTimerRouteImport } from './routes/admin_/mini-timer'
import { Route as AdminCompetitorsRouteImport } from './routes/admin/competitors'
import { Route as ViewOverlayRouteImport } from './routes/_view_/overlay'
import { Route as AdminScheduleRouteRouteImport } from './routes/admin/schedule/route'
import { Route as AdminRankingsRouteRouteImport } from './routes/admin/rankings/route'
import { Route as AdminParticipantsRouteRouteImport } from './routes/admin/participants/route'
import { Route as AdminEventRouteRouteImport } from './routes/admin/event/route'
import { Route as ViewTeamsMatchRouteRouteImport } from './routes/_view/teams-match/route'
import { Route as ViewScheduleRouteRouteImport } from './routes/_view/schedule/route'
import { Route as AdminMobileIndexRouteImport } from './routes/admin_/mobile/index'
import { Route as ViewTeamsMatchIndexRouteImport } from './routes/_view/teams-match/index'
import { Route as ViewStatsIndexRouteImport } from './routes/_view/stats/index'
import { Route as ViewScheduleIndexRouteImport } from './routes/_view/schedule/index'
import { Route as ViewResultsIndexRouteImport } from './routes/_view/results/index'
import { Route as ViewBracketIndexRouteImport } from './routes/_view/bracket/index'
import { Route as AdminScheduleIdRouteImport } from './routes/admin/schedule/$id'
import { Route as AdminRankingsIdRouteImport } from './routes/admin/rankings/$id'
import { Route as AdminParticipantsNewRouteImport } from './routes/admin/participants/new'
import { Route as AdminParticipantsIdRouteImport } from './routes/admin/participants/$id'
import { Route as AdminEventTimerRouteImport } from './routes/admin/event/timer'
import { Route as AdminEventGeneralRouteImport } from './routes/admin/event/general'
import { Route as AdminEventFinalRankingsRouteImport } from './routes/admin/event/final-rankings'
import { Route as ViewTeamsMatchIdRouteImport } from './routes/_view/teams-match/$id'
import { Route as ViewScheduleIdRouteImport } from './routes/_view/schedule/$id'
import { Route as ViewBracketIdRouteImport } from './routes/_view/bracket/$id'
import { Route as AdminMobileIdIndexRouteImport } from './routes/admin_/mobile/$id.index'
import { Route as AdminScheduleIdNewbracketRouteImport } from './routes/admin/schedule/$id.newbracket'
import { Route as AdminScheduleIdNewRouteImport } from './routes/admin/schedule/$id.new'
import { Route as AdminScheduleIdMatchIdRouteImport } from './routes/admin/schedule/$id.$matchId'
import { Route as AdminMobileIdMatchIdRouteRouteImport } from './routes/admin_/mobile/$id.$matchId/route'
import { Route as AdminMobileIdMatchIdIndexRouteImport } from './routes/admin_/mobile/$id.$matchId/index'
import { Route as AdminMobileIdMatchIdScoreRouteImport } from './routes/admin_/mobile/$id.$matchId/score'
import { Route as AdminMobileIdMatchIdInfoRouteImport } from './routes/admin_/mobile/$id.$matchId/info'
import { ServerRoute as ApiCompanionServerRouteImport } from './routes/api/companion'
import { ServerRoute as ApiTimerIndexServerRouteImport } from './routes/api/timer/index'
import { ServerRoute as ApiVmixGetReplaysServerRouteImport } from './routes/api/vmix/get-replays'
import { ServerRoute as ApiTimerStartServerRouteImport } from './routes/api/timer/start'
import { ServerRoute as ApiTimerResumeServerRouteImport } from './routes/api/timer/resume'
import { ServerRoute as ApiTimerRestartServerRouteImport } from './routes/api/timer/restart'
import { ServerRoute as ApiTimerPauseServerRouteImport } from './routes/api/timer/pause'
import { ServerRoute as ApiMigrationRunServerRouteImport } from './routes/api/migration/run'
import { ServerRoute as ApiTimerEventIndexServerRouteImport } from './routes/api/timer/event/index'
import { ServerRoute as ApiTimerEventStartServerRouteImport } from './routes/api/timer/event/start'
import { ServerRoute as ApiTimerEventResumeServerRouteImport } from './routes/api/timer/event/resume'
import { ServerRoute as ApiTimerEventRestartServerRouteImport } from './routes/api/timer/event/restart'
import { ServerRoute as ApiTimerEventRemoveTimeServerRouteImport } from './routes/api/timer/event/remove-time'
import { ServerRoute as ApiTimerEventPauseServerRouteImport } from './routes/api/timer/event/pause'
import { ServerRoute as ApiTimerEventAddTimeServerRouteImport } from './routes/api/timer/event/add-time'

const rootServerRouteImport = createServerRootRoute()

const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewRouteRoute = ViewRouteRouteImport.update({
  id: '/_view',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTimerRoute = AdminTimerRouteImport.update({
  id: '/admin_/timer',
  path: '/admin/timer',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminMiniTimerRoute = AdminMiniTimerRouteImport.update({
  id: '/admin_/mini-timer',
  path: '/admin/mini-timer',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminCompetitorsRoute = AdminCompetitorsRouteImport.update({
  id: '/competitors',
  path: '/competitors',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ViewOverlayRoute = ViewOverlayRouteImport.update({
  id: '/_view_/overlay',
  path: '/overlay',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminScheduleRouteRoute = AdminScheduleRouteRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminRankingsRouteRoute = AdminRankingsRouteRouteImport.update({
  id: '/rankings',
  path: '/rankings',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminParticipantsRouteRoute = AdminParticipantsRouteRouteImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminEventRouteRoute = AdminEventRouteRouteImport.update({
  id: '/event',
  path: '/event',
  getParentRoute: () => AdminRouteRoute,
} as any)
const ViewTeamsMatchRouteRoute = ViewTeamsMatchRouteRouteImport.update({
  id: '/teams-match',
  path: '/teams-match',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewScheduleRouteRoute = ViewScheduleRouteRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => ViewRouteRoute,
} as any)
const AdminMobileIndexRoute = AdminMobileIndexRouteImport.update({
  id: '/admin_/mobile/',
  path: '/admin/mobile/',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewTeamsMatchIndexRoute = ViewTeamsMatchIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewTeamsMatchRouteRoute,
} as any)
const ViewStatsIndexRoute = ViewStatsIndexRouteImport.update({
  id: '/stats/',
  path: '/stats/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewScheduleIndexRoute = ViewScheduleIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ViewScheduleRouteRoute,
} as any)
const ViewResultsIndexRoute = ViewResultsIndexRouteImport.update({
  id: '/results/',
  path: '/results/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const ViewBracketIndexRoute = ViewBracketIndexRouteImport.update({
  id: '/bracket/',
  path: '/bracket/',
  getParentRoute: () => ViewRouteRoute,
} as any)
const AdminScheduleIdRoute = AdminScheduleIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminScheduleRouteRoute,
} as any)
const AdminRankingsIdRoute = AdminRankingsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminRankingsRouteRoute,
} as any)
const AdminParticipantsNewRoute = AdminParticipantsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)
const AdminParticipantsIdRoute = AdminParticipantsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)
const AdminEventTimerRoute = AdminEventTimerRouteImport.update({
  id: '/timer',
  path: '/timer',
  getParentRoute: () => AdminEventRouteRoute,
} as any)
const AdminEventGeneralRoute = AdminEventGeneralRouteImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => AdminEventRouteRoute,
} as any)
const AdminEventFinalRankingsRoute = AdminEventFinalRankingsRouteImport.update({
  id: '/final-rankings',
  path: '/final-rankings',
  getParentRoute: () => AdminEventRouteRoute,
} as any)
const ViewTeamsMatchIdRoute = ViewTeamsMatchIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ViewTeamsMatchRouteRoute,
} as any)
const ViewScheduleIdRoute = ViewScheduleIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ViewScheduleRouteRoute,
} as any)
const ViewBracketIdRoute = ViewBracketIdRouteImport.update({
  id: '/bracket/$id',
  path: '/bracket/$id',
  getParentRoute: () => ViewRouteRoute,
} as any)
const AdminMobileIdIndexRoute = AdminMobileIdIndexRouteImport.update({
  id: '/admin_/mobile/$id/',
  path: '/admin/mobile/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminScheduleIdNewbracketRoute =
  AdminScheduleIdNewbracketRouteImport.update({
    id: '/newbracket',
    path: '/newbracket',
    getParentRoute: () => AdminScheduleIdRoute,
  } as any)
const AdminScheduleIdNewRoute = AdminScheduleIdNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminScheduleIdRoute,
} as any)
const AdminScheduleIdMatchIdRoute = AdminScheduleIdMatchIdRouteImport.update({
  id: '/$matchId',
  path: '/$matchId',
  getParentRoute: () => AdminScheduleIdRoute,
} as any)
const AdminMobileIdMatchIdRouteRoute =
  AdminMobileIdMatchIdRouteRouteImport.update({
    id: '/admin_/mobile/$id/$matchId',
    path: '/admin/mobile/$id/$matchId',
    getParentRoute: () => rootRouteImport,
  } as any)
const AdminMobileIdMatchIdIndexRoute =
  AdminMobileIdMatchIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AdminMobileIdMatchIdRouteRoute,
  } as any)
const AdminMobileIdMatchIdScoreRoute =
  AdminMobileIdMatchIdScoreRouteImport.update({
    id: '/score',
    path: '/score',
    getParentRoute: () => AdminMobileIdMatchIdRouteRoute,
  } as any)
const AdminMobileIdMatchIdInfoRoute =
  AdminMobileIdMatchIdInfoRouteImport.update({
    id: '/info',
    path: '/info',
    getParentRoute: () => AdminMobileIdMatchIdRouteRoute,
  } as any)
const ApiCompanionServerRoute = ApiCompanionServerRouteImport.update({
  id: '/api/companion',
  path: '/api/companion',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerIndexServerRoute = ApiTimerIndexServerRouteImport.update({
  id: '/api/timer/',
  path: '/api/timer/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiVmixGetReplaysServerRoute = ApiVmixGetReplaysServerRouteImport.update({
  id: '/api/vmix/get-replays',
  path: '/api/vmix/get-replays',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerStartServerRoute = ApiTimerStartServerRouteImport.update({
  id: '/api/timer/start',
  path: '/api/timer/start',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerResumeServerRoute = ApiTimerResumeServerRouteImport.update({
  id: '/api/timer/resume',
  path: '/api/timer/resume',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerRestartServerRoute = ApiTimerRestartServerRouteImport.update({
  id: '/api/timer/restart',
  path: '/api/timer/restart',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerPauseServerRoute = ApiTimerPauseServerRouteImport.update({
  id: '/api/timer/pause',
  path: '/api/timer/pause',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMigrationRunServerRoute = ApiMigrationRunServerRouteImport.update({
  id: '/api/migration/run',
  path: '/api/migration/run',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTimerEventIndexServerRoute =
  ApiTimerEventIndexServerRouteImport.update({
    id: '/api/timer/event/',
    path: '/api/timer/event/',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventStartServerRoute =
  ApiTimerEventStartServerRouteImport.update({
    id: '/api/timer/event/start',
    path: '/api/timer/event/start',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventResumeServerRoute =
  ApiTimerEventResumeServerRouteImport.update({
    id: '/api/timer/event/resume',
    path: '/api/timer/event/resume',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventRestartServerRoute =
  ApiTimerEventRestartServerRouteImport.update({
    id: '/api/timer/event/restart',
    path: '/api/timer/event/restart',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventRemoveTimeServerRoute =
  ApiTimerEventRemoveTimeServerRouteImport.update({
    id: '/api/timer/event/remove-time',
    path: '/api/timer/event/remove-time',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventPauseServerRoute =
  ApiTimerEventPauseServerRouteImport.update({
    id: '/api/timer/event/pause',
    path: '/api/timer/event/pause',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTimerEventAddTimeServerRoute =
  ApiTimerEventAddTimeServerRouteImport.update({
    id: '/api/timer/event/add-time',
    path: '/api/timer/event/add-time',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/schedule': typeof ViewScheduleRouteRouteWithChildren
  '/teams-match': typeof ViewTeamsMatchRouteRouteWithChildren
  '/admin/event': typeof AdminEventRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/rankings': typeof AdminRankingsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/overlay': typeof ViewOverlayRoute
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/admin/mini-timer': typeof AdminMiniTimerRoute
  '/admin/timer': typeof AdminTimerRoute
  '/bracket/$id': typeof ViewBracketIdRoute
  '/schedule/$id': typeof ViewScheduleIdRoute
  '/teams-match/$id': typeof ViewTeamsMatchIdRoute
  '/admin/event/final-rankings': typeof AdminEventFinalRankingsRoute
  '/admin/event/general': typeof AdminEventGeneralRoute
  '/admin/event/timer': typeof AdminEventTimerRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/rankings/$id': typeof AdminRankingsIdRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/bracket': typeof ViewBracketIndexRoute
  '/results': typeof ViewResultsIndexRoute
  '/schedule/': typeof ViewScheduleIndexRoute
  '/stats': typeof ViewStatsIndexRoute
  '/teams-match/': typeof ViewTeamsMatchIndexRoute
  '/admin/mobile': typeof AdminMobileIndexRoute
  '/admin/mobile/$id/$matchId': typeof AdminMobileIdMatchIdRouteRouteWithChildren
  '/admin/schedule/$id/$matchId': typeof AdminScheduleIdMatchIdRoute
  '/admin/schedule/$id/new': typeof AdminScheduleIdNewRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
  '/admin/mobile/$id': typeof AdminMobileIdIndexRoute
  '/admin/mobile/$id/$matchId/info': typeof AdminMobileIdMatchIdInfoRoute
  '/admin/mobile/$id/$matchId/score': typeof AdminMobileIdMatchIdScoreRoute
  '/admin/mobile/$id/$matchId/': typeof AdminMobileIdMatchIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/event': typeof AdminEventRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/rankings': typeof AdminRankingsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/overlay': typeof ViewOverlayRoute
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/admin/mini-timer': typeof AdminMiniTimerRoute
  '/admin/timer': typeof AdminTimerRoute
  '/bracket/$id': typeof ViewBracketIdRoute
  '/schedule/$id': typeof ViewScheduleIdRoute
  '/teams-match/$id': typeof ViewTeamsMatchIdRoute
  '/admin/event/final-rankings': typeof AdminEventFinalRankingsRoute
  '/admin/event/general': typeof AdminEventGeneralRoute
  '/admin/event/timer': typeof AdminEventTimerRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/rankings/$id': typeof AdminRankingsIdRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/bracket': typeof ViewBracketIndexRoute
  '/results': typeof ViewResultsIndexRoute
  '/schedule': typeof ViewScheduleIndexRoute
  '/stats': typeof ViewStatsIndexRoute
  '/teams-match': typeof ViewTeamsMatchIndexRoute
  '/admin/mobile': typeof AdminMobileIndexRoute
  '/admin/schedule/$id/$matchId': typeof AdminScheduleIdMatchIdRoute
  '/admin/schedule/$id/new': typeof AdminScheduleIdNewRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
  '/admin/mobile/$id': typeof AdminMobileIdIndexRoute
  '/admin/mobile/$id/$matchId/info': typeof AdminMobileIdMatchIdInfoRoute
  '/admin/mobile/$id/$matchId/score': typeof AdminMobileIdMatchIdScoreRoute
  '/admin/mobile/$id/$matchId': typeof AdminMobileIdMatchIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_view': typeof ViewRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/_view/schedule': typeof ViewScheduleRouteRouteWithChildren
  '/_view/teams-match': typeof ViewTeamsMatchRouteRouteWithChildren
  '/admin/event': typeof AdminEventRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/rankings': typeof AdminRankingsRouteRouteWithChildren
  '/admin/schedule': typeof AdminScheduleRouteRouteWithChildren
  '/_view_/overlay': typeof ViewOverlayRoute
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/admin_/mini-timer': typeof AdminMiniTimerRoute
  '/admin_/timer': typeof AdminTimerRoute
  '/_view/bracket/$id': typeof ViewBracketIdRoute
  '/_view/schedule/$id': typeof ViewScheduleIdRoute
  '/_view/teams-match/$id': typeof ViewTeamsMatchIdRoute
  '/admin/event/final-rankings': typeof AdminEventFinalRankingsRoute
  '/admin/event/general': typeof AdminEventGeneralRoute
  '/admin/event/timer': typeof AdminEventTimerRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/admin/rankings/$id': typeof AdminRankingsIdRoute
  '/admin/schedule/$id': typeof AdminScheduleIdRouteWithChildren
  '/_view/bracket/': typeof ViewBracketIndexRoute
  '/_view/results/': typeof ViewResultsIndexRoute
  '/_view/schedule/': typeof ViewScheduleIndexRoute
  '/_view/stats/': typeof ViewStatsIndexRoute
  '/_view/teams-match/': typeof ViewTeamsMatchIndexRoute
  '/admin_/mobile/': typeof AdminMobileIndexRoute
  '/admin_/mobile/$id/$matchId': typeof AdminMobileIdMatchIdRouteRouteWithChildren
  '/admin/schedule/$id/$matchId': typeof AdminScheduleIdMatchIdRoute
  '/admin/schedule/$id/new': typeof AdminScheduleIdNewRoute
  '/admin/schedule/$id/newbracket': typeof AdminScheduleIdNewbracketRoute
  '/admin_/mobile/$id/': typeof AdminMobileIdIndexRoute
  '/admin_/mobile/$id/$matchId/info': typeof AdminMobileIdMatchIdInfoRoute
  '/admin_/mobile/$id/$matchId/score': typeof AdminMobileIdMatchIdScoreRoute
  '/admin_/mobile/$id/$matchId/': typeof AdminMobileIdMatchIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/schedule'
    | '/teams-match'
    | '/admin/event'
    | '/admin/participants'
    | '/admin/rankings'
    | '/admin/schedule'
    | '/overlay'
    | '/admin/competitors'
    | '/admin/mini-timer'
    | '/admin/timer'
    | '/bracket/$id'
    | '/schedule/$id'
    | '/teams-match/$id'
    | '/admin/event/final-rankings'
    | '/admin/event/general'
    | '/admin/event/timer'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/rankings/$id'
    | '/admin/schedule/$id'
    | '/bracket'
    | '/results'
    | '/schedule/'
    | '/stats'
    | '/teams-match/'
    | '/admin/mobile'
    | '/admin/mobile/$id/$matchId'
    | '/admin/schedule/$id/$matchId'
    | '/admin/schedule/$id/new'
    | '/admin/schedule/$id/newbracket'
    | '/admin/mobile/$id'
    | '/admin/mobile/$id/$matchId/info'
    | '/admin/mobile/$id/$matchId/score'
    | '/admin/mobile/$id/$matchId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin/event'
    | '/admin/participants'
    | '/admin/rankings'
    | '/admin/schedule'
    | '/overlay'
    | '/admin/competitors'
    | '/admin/mini-timer'
    | '/admin/timer'
    | '/bracket/$id'
    | '/schedule/$id'
    | '/teams-match/$id'
    | '/admin/event/final-rankings'
    | '/admin/event/general'
    | '/admin/event/timer'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/rankings/$id'
    | '/admin/schedule/$id'
    | '/bracket'
    | '/results'
    | '/schedule'
    | '/stats'
    | '/teams-match'
    | '/admin/mobile'
    | '/admin/schedule/$id/$matchId'
    | '/admin/schedule/$id/new'
    | '/admin/schedule/$id/newbracket'
    | '/admin/mobile/$id'
    | '/admin/mobile/$id/$matchId/info'
    | '/admin/mobile/$id/$matchId/score'
    | '/admin/mobile/$id/$matchId'
  id:
    | '__root__'
    | '/'
    | '/_view'
    | '/admin'
    | '/_view/schedule'
    | '/_view/teams-match'
    | '/admin/event'
    | '/admin/participants'
    | '/admin/rankings'
    | '/admin/schedule'
    | '/_view_/overlay'
    | '/admin/competitors'
    | '/admin_/mini-timer'
    | '/admin_/timer'
    | '/_view/bracket/$id'
    | '/_view/schedule/$id'
    | '/_view/teams-match/$id'
    | '/admin/event/final-rankings'
    | '/admin/event/general'
    | '/admin/event/timer'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/admin/rankings/$id'
    | '/admin/schedule/$id'
    | '/_view/bracket/'
    | '/_view/results/'
    | '/_view/schedule/'
    | '/_view/stats/'
    | '/_view/teams-match/'
    | '/admin_/mobile/'
    | '/admin_/mobile/$id/$matchId'
    | '/admin/schedule/$id/$matchId'
    | '/admin/schedule/$id/new'
    | '/admin/schedule/$id/newbracket'
    | '/admin_/mobile/$id/'
    | '/admin_/mobile/$id/$matchId/info'
    | '/admin_/mobile/$id/$matchId/score'
    | '/admin_/mobile/$id/$matchId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ViewRouteRoute: typeof ViewRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  ViewOverlayRoute: typeof ViewOverlayRoute
  AdminMiniTimerRoute: typeof AdminMiniTimerRoute
  AdminTimerRoute: typeof AdminTimerRoute
  AdminMobileIndexRoute: typeof AdminMobileIndexRoute
  AdminMobileIdMatchIdRouteRoute: typeof AdminMobileIdMatchIdRouteRouteWithChildren
  AdminMobileIdIndexRoute: typeof AdminMobileIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/companion': typeof ApiCompanionServerRoute
  '/api/migration/run': typeof ApiMigrationRunServerRoute
  '/api/timer/pause': typeof ApiTimerPauseServerRoute
  '/api/timer/restart': typeof ApiTimerRestartServerRoute
  '/api/timer/resume': typeof ApiTimerResumeServerRoute
  '/api/timer/start': typeof ApiTimerStartServerRoute
  '/api/vmix/get-replays': typeof ApiVmixGetReplaysServerRoute
  '/api/timer': typeof ApiTimerIndexServerRoute
  '/api/timer/event/add-time': typeof ApiTimerEventAddTimeServerRoute
  '/api/timer/event/pause': typeof ApiTimerEventPauseServerRoute
  '/api/timer/event/remove-time': typeof ApiTimerEventRemoveTimeServerRoute
  '/api/timer/event/restart': typeof ApiTimerEventRestartServerRoute
  '/api/timer/event/resume': typeof ApiTimerEventResumeServerRoute
  '/api/timer/event/start': typeof ApiTimerEventStartServerRoute
  '/api/timer/event': typeof ApiTimerEventIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/companion': typeof ApiCompanionServerRoute
  '/api/migration/run': typeof ApiMigrationRunServerRoute
  '/api/timer/pause': typeof ApiTimerPauseServerRoute
  '/api/timer/restart': typeof ApiTimerRestartServerRoute
  '/api/timer/resume': typeof ApiTimerResumeServerRoute
  '/api/timer/start': typeof ApiTimerStartServerRoute
  '/api/vmix/get-replays': typeof ApiVmixGetReplaysServerRoute
  '/api/timer': typeof ApiTimerIndexServerRoute
  '/api/timer/event/add-time': typeof ApiTimerEventAddTimeServerRoute
  '/api/timer/event/pause': typeof ApiTimerEventPauseServerRoute
  '/api/timer/event/remove-time': typeof ApiTimerEventRemoveTimeServerRoute
  '/api/timer/event/restart': typeof ApiTimerEventRestartServerRoute
  '/api/timer/event/resume': typeof ApiTimerEventResumeServerRoute
  '/api/timer/event/start': typeof ApiTimerEventStartServerRoute
  '/api/timer/event': typeof ApiTimerEventIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/companion': typeof ApiCompanionServerRoute
  '/api/migration/run': typeof ApiMigrationRunServerRoute
  '/api/timer/pause': typeof ApiTimerPauseServerRoute
  '/api/timer/restart': typeof ApiTimerRestartServerRoute
  '/api/timer/resume': typeof ApiTimerResumeServerRoute
  '/api/timer/start': typeof ApiTimerStartServerRoute
  '/api/vmix/get-replays': typeof ApiVmixGetReplaysServerRoute
  '/api/timer/': typeof ApiTimerIndexServerRoute
  '/api/timer/event/add-time': typeof ApiTimerEventAddTimeServerRoute
  '/api/timer/event/pause': typeof ApiTimerEventPauseServerRoute
  '/api/timer/event/remove-time': typeof ApiTimerEventRemoveTimeServerRoute
  '/api/timer/event/restart': typeof ApiTimerEventRestartServerRoute
  '/api/timer/event/resume': typeof ApiTimerEventResumeServerRoute
  '/api/timer/event/start': typeof ApiTimerEventStartServerRoute
  '/api/timer/event/': typeof ApiTimerEventIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/companion'
    | '/api/migration/run'
    | '/api/timer/pause'
    | '/api/timer/restart'
    | '/api/timer/resume'
    | '/api/timer/start'
    | '/api/vmix/get-replays'
    | '/api/timer'
    | '/api/timer/event/add-time'
    | '/api/timer/event/pause'
    | '/api/timer/event/remove-time'
    | '/api/timer/event/restart'
    | '/api/timer/event/resume'
    | '/api/timer/event/start'
    | '/api/timer/event'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/companion'
    | '/api/migration/run'
    | '/api/timer/pause'
    | '/api/timer/restart'
    | '/api/timer/resume'
    | '/api/timer/start'
    | '/api/vmix/get-replays'
    | '/api/timer'
    | '/api/timer/event/add-time'
    | '/api/timer/event/pause'
    | '/api/timer/event/remove-time'
    | '/api/timer/event/restart'
    | '/api/timer/event/resume'
    | '/api/timer/event/start'
    | '/api/timer/event'
  id:
    | '__root__'
    | '/api/companion'
    | '/api/migration/run'
    | '/api/timer/pause'
    | '/api/timer/restart'
    | '/api/timer/resume'
    | '/api/timer/start'
    | '/api/vmix/get-replays'
    | '/api/timer/'
    | '/api/timer/event/add-time'
    | '/api/timer/event/pause'
    | '/api/timer/event/remove-time'
    | '/api/timer/event/restart'
    | '/api/timer/event/resume'
    | '/api/timer/event/start'
    | '/api/timer/event/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCompanionServerRoute: typeof ApiCompanionServerRoute
  ApiMigrationRunServerRoute: typeof ApiMigrationRunServerRoute
  ApiTimerPauseServerRoute: typeof ApiTimerPauseServerRoute
  ApiTimerRestartServerRoute: typeof ApiTimerRestartServerRoute
  ApiTimerResumeServerRoute: typeof ApiTimerResumeServerRoute
  ApiTimerStartServerRoute: typeof ApiTimerStartServerRoute
  ApiVmixGetReplaysServerRoute: typeof ApiVmixGetReplaysServerRoute
  ApiTimerIndexServerRoute: typeof ApiTimerIndexServerRoute
  ApiTimerEventAddTimeServerRoute: typeof ApiTimerEventAddTimeServerRoute
  ApiTimerEventPauseServerRoute: typeof ApiTimerEventPauseServerRoute
  ApiTimerEventRemoveTimeServerRoute: typeof ApiTimerEventRemoveTimeServerRoute
  ApiTimerEventRestartServerRoute: typeof ApiTimerEventRestartServerRoute
  ApiTimerEventResumeServerRoute: typeof ApiTimerEventResumeServerRoute
  ApiTimerEventStartServerRoute: typeof ApiTimerEventStartServerRoute
  ApiTimerEventIndexServerRoute: typeof ApiTimerEventIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view': {
      id: '/_view'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ViewRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin_/timer': {
      id: '/admin_/timer'
      path: '/admin/timer'
      fullPath: '/admin/timer'
      preLoaderRoute: typeof AdminTimerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin_/mini-timer': {
      id: '/admin_/mini-timer'
      path: '/admin/mini-timer'
      fullPath: '/admin/mini-timer'
      preLoaderRoute: typeof AdminMiniTimerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/competitors': {
      id: '/admin/competitors'
      path: '/competitors'
      fullPath: '/admin/competitors'
      preLoaderRoute: typeof AdminCompetitorsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_view_/overlay': {
      id: '/_view_/overlay'
      path: '/overlay'
      fullPath: '/overlay'
      preLoaderRoute: typeof ViewOverlayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/schedule': {
      id: '/admin/schedule'
      path: '/schedule'
      fullPath: '/admin/schedule'
      preLoaderRoute: typeof AdminScheduleRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/rankings': {
      id: '/admin/rankings'
      path: '/rankings'
      fullPath: '/admin/rankings'
      preLoaderRoute: typeof AdminRankingsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/participants': {
      id: '/admin/participants'
      path: '/participants'
      fullPath: '/admin/participants'
      preLoaderRoute: typeof AdminParticipantsRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/event': {
      id: '/admin/event'
      path: '/event'
      fullPath: '/admin/event'
      preLoaderRoute: typeof AdminEventRouteRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/_view/teams-match': {
      id: '/_view/teams-match'
      path: '/teams-match'
      fullPath: '/teams-match'
      preLoaderRoute: typeof ViewTeamsMatchRouteRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/schedule': {
      id: '/_view/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ViewScheduleRouteRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/admin_/mobile/': {
      id: '/admin_/mobile/'
      path: '/admin/mobile'
      fullPath: '/admin/mobile'
      preLoaderRoute: typeof AdminMobileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_view/teams-match/': {
      id: '/_view/teams-match/'
      path: '/'
      fullPath: '/teams-match/'
      preLoaderRoute: typeof ViewTeamsMatchIndexRouteImport
      parentRoute: typeof ViewTeamsMatchRouteRoute
    }
    '/_view/stats/': {
      id: '/_view/stats/'
      path: '/stats'
      fullPath: '/stats'
      preLoaderRoute: typeof ViewStatsIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/schedule/': {
      id: '/_view/schedule/'
      path: '/'
      fullPath: '/schedule/'
      preLoaderRoute: typeof ViewScheduleIndexRouteImport
      parentRoute: typeof ViewScheduleRouteRoute
    }
    '/_view/results/': {
      id: '/_view/results/'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ViewResultsIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/_view/bracket/': {
      id: '/_view/bracket/'
      path: '/bracket'
      fullPath: '/bracket'
      preLoaderRoute: typeof ViewBracketIndexRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/admin/schedule/$id': {
      id: '/admin/schedule/$id'
      path: '/$id'
      fullPath: '/admin/schedule/$id'
      preLoaderRoute: typeof AdminScheduleIdRouteImport
      parentRoute: typeof AdminScheduleRouteRoute
    }
    '/admin/rankings/$id': {
      id: '/admin/rankings/$id'
      path: '/$id'
      fullPath: '/admin/rankings/$id'
      preLoaderRoute: typeof AdminRankingsIdRouteImport
      parentRoute: typeof AdminRankingsRouteRoute
    }
    '/admin/participants/new': {
      id: '/admin/participants/new'
      path: '/new'
      fullPath: '/admin/participants/new'
      preLoaderRoute: typeof AdminParticipantsNewRouteImport
      parentRoute: typeof AdminParticipantsRouteRoute
    }
    '/admin/participants/$id': {
      id: '/admin/participants/$id'
      path: '/$id'
      fullPath: '/admin/participants/$id'
      preLoaderRoute: typeof AdminParticipantsIdRouteImport
      parentRoute: typeof AdminParticipantsRouteRoute
    }
    '/admin/event/timer': {
      id: '/admin/event/timer'
      path: '/timer'
      fullPath: '/admin/event/timer'
      preLoaderRoute: typeof AdminEventTimerRouteImport
      parentRoute: typeof AdminEventRouteRoute
    }
    '/admin/event/general': {
      id: '/admin/event/general'
      path: '/general'
      fullPath: '/admin/event/general'
      preLoaderRoute: typeof AdminEventGeneralRouteImport
      parentRoute: typeof AdminEventRouteRoute
    }
    '/admin/event/final-rankings': {
      id: '/admin/event/final-rankings'
      path: '/final-rankings'
      fullPath: '/admin/event/final-rankings'
      preLoaderRoute: typeof AdminEventFinalRankingsRouteImport
      parentRoute: typeof AdminEventRouteRoute
    }
    '/_view/teams-match/$id': {
      id: '/_view/teams-match/$id'
      path: '/$id'
      fullPath: '/teams-match/$id'
      preLoaderRoute: typeof ViewTeamsMatchIdRouteImport
      parentRoute: typeof ViewTeamsMatchRouteRoute
    }
    '/_view/schedule/$id': {
      id: '/_view/schedule/$id'
      path: '/$id'
      fullPath: '/schedule/$id'
      preLoaderRoute: typeof ViewScheduleIdRouteImport
      parentRoute: typeof ViewScheduleRouteRoute
    }
    '/_view/bracket/$id': {
      id: '/_view/bracket/$id'
      path: '/bracket/$id'
      fullPath: '/bracket/$id'
      preLoaderRoute: typeof ViewBracketIdRouteImport
      parentRoute: typeof ViewRouteRoute
    }
    '/admin_/mobile/$id/': {
      id: '/admin_/mobile/$id/'
      path: '/admin/mobile/$id'
      fullPath: '/admin/mobile/$id'
      preLoaderRoute: typeof AdminMobileIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/schedule/$id/newbracket': {
      id: '/admin/schedule/$id/newbracket'
      path: '/newbracket'
      fullPath: '/admin/schedule/$id/newbracket'
      preLoaderRoute: typeof AdminScheduleIdNewbracketRouteImport
      parentRoute: typeof AdminScheduleIdRoute
    }
    '/admin/schedule/$id/new': {
      id: '/admin/schedule/$id/new'
      path: '/new'
      fullPath: '/admin/schedule/$id/new'
      preLoaderRoute: typeof AdminScheduleIdNewRouteImport
      parentRoute: typeof AdminScheduleIdRoute
    }
    '/admin/schedule/$id/$matchId': {
      id: '/admin/schedule/$id/$matchId'
      path: '/$matchId'
      fullPath: '/admin/schedule/$id/$matchId'
      preLoaderRoute: typeof AdminScheduleIdMatchIdRouteImport
      parentRoute: typeof AdminScheduleIdRoute
    }
    '/admin_/mobile/$id/$matchId': {
      id: '/admin_/mobile/$id/$matchId'
      path: '/admin/mobile/$id/$matchId'
      fullPath: '/admin/mobile/$id/$matchId'
      preLoaderRoute: typeof AdminMobileIdMatchIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin_/mobile/$id/$matchId/': {
      id: '/admin_/mobile/$id/$matchId/'
      path: '/'
      fullPath: '/admin/mobile/$id/$matchId/'
      preLoaderRoute: typeof AdminMobileIdMatchIdIndexRouteImport
      parentRoute: typeof AdminMobileIdMatchIdRouteRoute
    }
    '/admin_/mobile/$id/$matchId/score': {
      id: '/admin_/mobile/$id/$matchId/score'
      path: '/score'
      fullPath: '/admin/mobile/$id/$matchId/score'
      preLoaderRoute: typeof AdminMobileIdMatchIdScoreRouteImport
      parentRoute: typeof AdminMobileIdMatchIdRouteRoute
    }
    '/admin_/mobile/$id/$matchId/info': {
      id: '/admin_/mobile/$id/$matchId/info'
      path: '/info'
      fullPath: '/admin/mobile/$id/$matchId/info'
      preLoaderRoute: typeof AdminMobileIdMatchIdInfoRouteImport
      parentRoute: typeof AdminMobileIdMatchIdRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/companion': {
      id: '/api/companion'
      path: '/api/companion'
      fullPath: '/api/companion'
      preLoaderRoute: typeof ApiCompanionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/': {
      id: '/api/timer/'
      path: '/api/timer'
      fullPath: '/api/timer'
      preLoaderRoute: typeof ApiTimerIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/vmix/get-replays': {
      id: '/api/vmix/get-replays'
      path: '/api/vmix/get-replays'
      fullPath: '/api/vmix/get-replays'
      preLoaderRoute: typeof ApiVmixGetReplaysServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/start': {
      id: '/api/timer/start'
      path: '/api/timer/start'
      fullPath: '/api/timer/start'
      preLoaderRoute: typeof ApiTimerStartServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/resume': {
      id: '/api/timer/resume'
      path: '/api/timer/resume'
      fullPath: '/api/timer/resume'
      preLoaderRoute: typeof ApiTimerResumeServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/restart': {
      id: '/api/timer/restart'
      path: '/api/timer/restart'
      fullPath: '/api/timer/restart'
      preLoaderRoute: typeof ApiTimerRestartServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/pause': {
      id: '/api/timer/pause'
      path: '/api/timer/pause'
      fullPath: '/api/timer/pause'
      preLoaderRoute: typeof ApiTimerPauseServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/migration/run': {
      id: '/api/migration/run'
      path: '/api/migration/run'
      fullPath: '/api/migration/run'
      preLoaderRoute: typeof ApiMigrationRunServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/': {
      id: '/api/timer/event/'
      path: '/api/timer/event'
      fullPath: '/api/timer/event'
      preLoaderRoute: typeof ApiTimerEventIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/start': {
      id: '/api/timer/event/start'
      path: '/api/timer/event/start'
      fullPath: '/api/timer/event/start'
      preLoaderRoute: typeof ApiTimerEventStartServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/resume': {
      id: '/api/timer/event/resume'
      path: '/api/timer/event/resume'
      fullPath: '/api/timer/event/resume'
      preLoaderRoute: typeof ApiTimerEventResumeServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/restart': {
      id: '/api/timer/event/restart'
      path: '/api/timer/event/restart'
      fullPath: '/api/timer/event/restart'
      preLoaderRoute: typeof ApiTimerEventRestartServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/remove-time': {
      id: '/api/timer/event/remove-time'
      path: '/api/timer/event/remove-time'
      fullPath: '/api/timer/event/remove-time'
      preLoaderRoute: typeof ApiTimerEventRemoveTimeServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/pause': {
      id: '/api/timer/event/pause'
      path: '/api/timer/event/pause'
      fullPath: '/api/timer/event/pause'
      preLoaderRoute: typeof ApiTimerEventPauseServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/timer/event/add-time': {
      id: '/api/timer/event/add-time'
      path: '/api/timer/event/add-time'
      fullPath: '/api/timer/event/add-time'
      preLoaderRoute: typeof ApiTimerEventAddTimeServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ViewScheduleRouteRouteChildren {
  ViewScheduleIdRoute: typeof ViewScheduleIdRoute
  ViewScheduleIndexRoute: typeof ViewScheduleIndexRoute
}

const ViewScheduleRouteRouteChildren: ViewScheduleRouteRouteChildren = {
  ViewScheduleIdRoute: ViewScheduleIdRoute,
  ViewScheduleIndexRoute: ViewScheduleIndexRoute,
}

const ViewScheduleRouteRouteWithChildren =
  ViewScheduleRouteRoute._addFileChildren(ViewScheduleRouteRouteChildren)

interface ViewTeamsMatchRouteRouteChildren {
  ViewTeamsMatchIdRoute: typeof ViewTeamsMatchIdRoute
  ViewTeamsMatchIndexRoute: typeof ViewTeamsMatchIndexRoute
}

const ViewTeamsMatchRouteRouteChildren: ViewTeamsMatchRouteRouteChildren = {
  ViewTeamsMatchIdRoute: ViewTeamsMatchIdRoute,
  ViewTeamsMatchIndexRoute: ViewTeamsMatchIndexRoute,
}

const ViewTeamsMatchRouteRouteWithChildren =
  ViewTeamsMatchRouteRoute._addFileChildren(ViewTeamsMatchRouteRouteChildren)

interface ViewRouteRouteChildren {
  ViewScheduleRouteRoute: typeof ViewScheduleRouteRouteWithChildren
  ViewTeamsMatchRouteRoute: typeof ViewTeamsMatchRouteRouteWithChildren
  ViewBracketIdRoute: typeof ViewBracketIdRoute
  ViewBracketIndexRoute: typeof ViewBracketIndexRoute
  ViewResultsIndexRoute: typeof ViewResultsIndexRoute
  ViewStatsIndexRoute: typeof ViewStatsIndexRoute
}

const ViewRouteRouteChildren: ViewRouteRouteChildren = {
  ViewScheduleRouteRoute: ViewScheduleRouteRouteWithChildren,
  ViewTeamsMatchRouteRoute: ViewTeamsMatchRouteRouteWithChildren,
  ViewBracketIdRoute: ViewBracketIdRoute,
  ViewBracketIndexRoute: ViewBracketIndexRoute,
  ViewResultsIndexRoute: ViewResultsIndexRoute,
  ViewStatsIndexRoute: ViewStatsIndexRoute,
}

const ViewRouteRouteWithChildren = ViewRouteRoute._addFileChildren(
  ViewRouteRouteChildren,
)

interface AdminEventRouteRouteChildren {
  AdminEventFinalRankingsRoute: typeof AdminEventFinalRankingsRoute
  AdminEventGeneralRoute: typeof AdminEventGeneralRoute
  AdminEventTimerRoute: typeof AdminEventTimerRoute
}

const AdminEventRouteRouteChildren: AdminEventRouteRouteChildren = {
  AdminEventFinalRankingsRoute: AdminEventFinalRankingsRoute,
  AdminEventGeneralRoute: AdminEventGeneralRoute,
  AdminEventTimerRoute: AdminEventTimerRoute,
}

const AdminEventRouteRouteWithChildren = AdminEventRouteRoute._addFileChildren(
  AdminEventRouteRouteChildren,
)

interface AdminParticipantsRouteRouteChildren {
  AdminParticipantsIdRoute: typeof AdminParticipantsIdRoute
  AdminParticipantsNewRoute: typeof AdminParticipantsNewRoute
}

const AdminParticipantsRouteRouteChildren: AdminParticipantsRouteRouteChildren =
  {
    AdminParticipantsIdRoute: AdminParticipantsIdRoute,
    AdminParticipantsNewRoute: AdminParticipantsNewRoute,
  }

const AdminParticipantsRouteRouteWithChildren =
  AdminParticipantsRouteRoute._addFileChildren(
    AdminParticipantsRouteRouteChildren,
  )

interface AdminRankingsRouteRouteChildren {
  AdminRankingsIdRoute: typeof AdminRankingsIdRoute
}

const AdminRankingsRouteRouteChildren: AdminRankingsRouteRouteChildren = {
  AdminRankingsIdRoute: AdminRankingsIdRoute,
}

const AdminRankingsRouteRouteWithChildren =
  AdminRankingsRouteRoute._addFileChildren(AdminRankingsRouteRouteChildren)

interface AdminScheduleIdRouteChildren {
  AdminScheduleIdMatchIdRoute: typeof AdminScheduleIdMatchIdRoute
  AdminScheduleIdNewRoute: typeof AdminScheduleIdNewRoute
  AdminScheduleIdNewbracketRoute: typeof AdminScheduleIdNewbracketRoute
}

const AdminScheduleIdRouteChildren: AdminScheduleIdRouteChildren = {
  AdminScheduleIdMatchIdRoute: AdminScheduleIdMatchIdRoute,
  AdminScheduleIdNewRoute: AdminScheduleIdNewRoute,
  AdminScheduleIdNewbracketRoute: AdminScheduleIdNewbracketRoute,
}

const AdminScheduleIdRouteWithChildren = AdminScheduleIdRoute._addFileChildren(
  AdminScheduleIdRouteChildren,
)

interface AdminScheduleRouteRouteChildren {
  AdminScheduleIdRoute: typeof AdminScheduleIdRouteWithChildren
}

const AdminScheduleRouteRouteChildren: AdminScheduleRouteRouteChildren = {
  AdminScheduleIdRoute: AdminScheduleIdRouteWithChildren,
}

const AdminScheduleRouteRouteWithChildren =
  AdminScheduleRouteRoute._addFileChildren(AdminScheduleRouteRouteChildren)

interface AdminRouteRouteChildren {
  AdminEventRouteRoute: typeof AdminEventRouteRouteWithChildren
  AdminParticipantsRouteRoute: typeof AdminParticipantsRouteRouteWithChildren
  AdminRankingsRouteRoute: typeof AdminRankingsRouteRouteWithChildren
  AdminScheduleRouteRoute: typeof AdminScheduleRouteRouteWithChildren
  AdminCompetitorsRoute: typeof AdminCompetitorsRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminEventRouteRoute: AdminEventRouteRouteWithChildren,
  AdminParticipantsRouteRoute: AdminParticipantsRouteRouteWithChildren,
  AdminRankingsRouteRoute: AdminRankingsRouteRouteWithChildren,
  AdminScheduleRouteRoute: AdminScheduleRouteRouteWithChildren,
  AdminCompetitorsRoute: AdminCompetitorsRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AdminMobileIdMatchIdRouteRouteChildren {
  AdminMobileIdMatchIdInfoRoute: typeof AdminMobileIdMatchIdInfoRoute
  AdminMobileIdMatchIdScoreRoute: typeof AdminMobileIdMatchIdScoreRoute
  AdminMobileIdMatchIdIndexRoute: typeof AdminMobileIdMatchIdIndexRoute
}

const AdminMobileIdMatchIdRouteRouteChildren: AdminMobileIdMatchIdRouteRouteChildren =
  {
    AdminMobileIdMatchIdInfoRoute: AdminMobileIdMatchIdInfoRoute,
    AdminMobileIdMatchIdScoreRoute: AdminMobileIdMatchIdScoreRoute,
    AdminMobileIdMatchIdIndexRoute: AdminMobileIdMatchIdIndexRoute,
  }

const AdminMobileIdMatchIdRouteRouteWithChildren =
  AdminMobileIdMatchIdRouteRoute._addFileChildren(
    AdminMobileIdMatchIdRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ViewRouteRoute: ViewRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  ViewOverlayRoute: ViewOverlayRoute,
  AdminMiniTimerRoute: AdminMiniTimerRoute,
  AdminTimerRoute: AdminTimerRoute,
  AdminMobileIndexRoute: AdminMobileIndexRoute,
  AdminMobileIdMatchIdRouteRoute: AdminMobileIdMatchIdRouteRouteWithChildren,
  AdminMobileIdIndexRoute: AdminMobileIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCompanionServerRoute: ApiCompanionServerRoute,
  ApiMigrationRunServerRoute: ApiMigrationRunServerRoute,
  ApiTimerPauseServerRoute: ApiTimerPauseServerRoute,
  ApiTimerRestartServerRoute: ApiTimerRestartServerRoute,
  ApiTimerResumeServerRoute: ApiTimerResumeServerRoute,
  ApiTimerStartServerRoute: ApiTimerStartServerRoute,
  ApiVmixGetReplaysServerRoute: ApiVmixGetReplaysServerRoute,
  ApiTimerIndexServerRoute: ApiTimerIndexServerRoute,
  ApiTimerEventAddTimeServerRoute: ApiTimerEventAddTimeServerRoute,
  ApiTimerEventPauseServerRoute: ApiTimerEventPauseServerRoute,
  ApiTimerEventRemoveTimeServerRoute: ApiTimerEventRemoveTimeServerRoute,
  ApiTimerEventRestartServerRoute: ApiTimerEventRestartServerRoute,
  ApiTimerEventResumeServerRoute: ApiTimerEventResumeServerRoute,
  ApiTimerEventStartServerRoute: ApiTimerEventStartServerRoute,
  ApiTimerEventIndexServerRoute: ApiTimerEventIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
