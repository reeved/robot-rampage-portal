/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as RankingIndexImport } from './routes/ranking/index'
import { Route as BracketIndexImport } from './routes/bracket/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as AdminCompetitorsImport } from './routes/admin/competitors'
import { Route as AdminParticipantsRouteImport } from './routes/admin/participants/route'
import { Route as DemoStartServerFuncsImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestImport } from './routes/demo.start.api-request'
import { Route as AdminParticipantsNewImport } from './routes/admin/participants/new'
import { Route as AdminParticipantsIdImport } from './routes/admin/participants/$id'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RankingIndexRoute = RankingIndexImport.update({
  id: '/ranking/',
  path: '/ranking/',
  getParentRoute: () => rootRoute,
} as any)

const BracketIndexRoute = BracketIndexImport.update({
  id: '/bracket/',
  path: '/bracket/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const AdminCompetitorsRoute = AdminCompetitorsImport.update({
  id: '/competitors',
  path: '/competitors',
  getParentRoute: () => AdminRouteRoute,
} as any)

const AdminParticipantsRouteRoute = AdminParticipantsRouteImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => AdminRouteRoute,
} as any)

const DemoStartServerFuncsRoute = DemoStartServerFuncsImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRoute,
} as any)

const DemoStartApiRequestRoute = DemoStartApiRequestImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRoute,
} as any)

const AdminParticipantsNewRoute = AdminParticipantsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)

const AdminParticipantsIdRoute = AdminParticipantsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AdminParticipantsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin/participants': {
      id: '/admin/participants'
      path: '/participants'
      fullPath: '/admin/participants'
      preLoaderRoute: typeof AdminParticipantsRouteImport
      parentRoute: typeof AdminRouteImport
    }
    '/admin/competitors': {
      id: '/admin/competitors'
      path: '/competitors'
      fullPath: '/admin/competitors'
      preLoaderRoute: typeof AdminCompetitorsImport
      parentRoute: typeof AdminRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/bracket/': {
      id: '/bracket/'
      path: '/bracket'
      fullPath: '/bracket'
      preLoaderRoute: typeof BracketIndexImport
      parentRoute: typeof rootRoute
    }
    '/ranking/': {
      id: '/ranking/'
      path: '/ranking'
      fullPath: '/ranking'
      preLoaderRoute: typeof RankingIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/participants/$id': {
      id: '/admin/participants/$id'
      path: '/$id'
      fullPath: '/admin/participants/$id'
      preLoaderRoute: typeof AdminParticipantsIdImport
      parentRoute: typeof AdminParticipantsRouteImport
    }
    '/admin/participants/new': {
      id: '/admin/participants/new'
      path: '/new'
      fullPath: '/admin/participants/new'
      preLoaderRoute: typeof AdminParticipantsNewImport
      parentRoute: typeof AdminParticipantsRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestImport
      parentRoute: typeof rootRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminParticipantsRouteRouteChildren {
  AdminParticipantsIdRoute: typeof AdminParticipantsIdRoute
  AdminParticipantsNewRoute: typeof AdminParticipantsNewRoute
}

const AdminParticipantsRouteRouteChildren: AdminParticipantsRouteRouteChildren =
  {
    AdminParticipantsIdRoute: AdminParticipantsIdRoute,
    AdminParticipantsNewRoute: AdminParticipantsNewRoute,
  }

const AdminParticipantsRouteRouteWithChildren =
  AdminParticipantsRouteRoute._addFileChildren(
    AdminParticipantsRouteRouteChildren,
  )

interface AdminRouteRouteChildren {
  AdminParticipantsRouteRoute: typeof AdminParticipantsRouteRouteWithChildren
  AdminCompetitorsRoute: typeof AdminCompetitorsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminParticipantsRouteRoute: AdminParticipantsRouteRouteWithChildren,
  AdminCompetitorsRoute: AdminCompetitorsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/': typeof AdminIndexRoute
  '/bracket': typeof BracketIndexRoute
  '/ranking': typeof RankingIndexRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin': typeof AdminIndexRoute
  '/bracket': typeof BracketIndexRoute
  '/ranking': typeof RankingIndexRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/admin/participants': typeof AdminParticipantsRouteRouteWithChildren
  '/admin/competitors': typeof AdminCompetitorsRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/': typeof AdminIndexRoute
  '/bracket/': typeof BracketIndexRoute
  '/ranking/': typeof RankingIndexRoute
  '/admin/participants/$id': typeof AdminParticipantsIdRoute
  '/admin/participants/new': typeof AdminParticipantsNewRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin/participants'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/admin/'
    | '/bracket'
    | '/ranking'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/participants'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/admin'
    | '/bracket'
    | '/ranking'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin/participants'
    | '/admin/competitors'
    | '/demo/tanstack-query'
    | '/admin/'
    | '/bracket/'
    | '/ranking/'
    | '/admin/participants/$id'
    | '/admin/participants/new'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  BracketIndexRoute: typeof BracketIndexRoute
  RankingIndexRoute: typeof RankingIndexRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  BracketIndexRoute: BracketIndexRoute,
  RankingIndexRoute: RankingIndexRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/demo/tanstack-query",
        "/bracket/",
        "/ranking/",
        "/demo/start/api-request",
        "/demo/start/server-funcs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/participants",
        "/admin/competitors",
        "/admin/"
      ]
    },
    "/admin/participants": {
      "filePath": "admin/participants/route.tsx",
      "parent": "/admin",
      "children": [
        "/admin/participants/$id",
        "/admin/participants/new"
      ]
    },
    "/admin/competitors": {
      "filePath": "admin/competitors.tsx",
      "parent": "/admin"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/bracket/": {
      "filePath": "bracket/index.tsx"
    },
    "/ranking/": {
      "filePath": "ranking/index.tsx"
    },
    "/admin/participants/$id": {
      "filePath": "admin/participants/$id.tsx",
      "parent": "/admin/participants"
    },
    "/admin/participants/new": {
      "filePath": "admin/participants/new.tsx",
      "parent": "/admin/participants"
    },
    "/demo/start/api-request": {
      "filePath": "demo.start.api-request.tsx"
    },
    "/demo/start/server-funcs": {
      "filePath": "demo.start.server-funcs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
